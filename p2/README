In project #2, we have several modules including Queue, stats, threads and
errorHandling.

The threads are created inside main.c after the three shared queues have
been created successfully. In order to pass two queues as an argument to
the function pthread_create(), we create a new structure called Multi_args
inside the threads module so that we can pass the pointer to the struct as
an arugment to pthread_create().

While the threads are running parallelly, we used semaphore to make sure
that only after some threads have done the enqueue can another thread does
the dequeue, otherwise, the threads trying to do the dequeue operation will
be blocked.

For the Queue structure, there are two important variables: a pointer to a
stats struct that stores the statistics of the queue (enqueueCount,
dequeueCount, enqueueTime, dequeueTime, enq_start_time and deq_start_time),
and a pointer to a list of pointers to strings that stores the list of
pointers to the strings that munch1 and munch2 and writer will operate on.
The reason that we store pointers to strings is that after we call malloc()
to store the valid string enqueued by reader, then we no longer need to copy
the strings over and over again. The malloc'ed space for the string will be
freed by the writer.

For each operation on the statistics of the queue, it is placed in a
critical section so that no other thread can operate the value while one
thread is updating the statistics.

Not only the statistics operations, but also the enqueue and dequeue
operations inside Queue module are placed inside the critical section of
the corresponding functions. This improves the reusability of the code.

The errorHandling module handles errors caused by malloc(), gettimeofday(),
sem_init(), sem_wait(), sem_post(), pthread_create() and pthread_join().
If any of the functions failed, the program will print out the error
message and exit.